(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{176:function(e,t,r){"use strict";r.r(t);var o=r(9),component=Object(o.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("section",[r("h1",[e._v("Crafting Restful APIs")]),e._v(" "),r("h2",[e._v("Resources")]),e._v(" "),r("p",[e._v("Resources represent an entity, for example a car, building, person, etc.\nI usually use name my resources as plural, as most of the time I'm working with a collection of entities.")]),e._v(" "),r("p",[e._v("Its easiest to think of your API like a database, it is used to create, read, update or delete data.")]),e._v(" "),r("h2",[e._v("HTTP Verbs")]),e._v(" "),r("p",[e._v("HTTPS verbs describe the action thats going to take place, for example:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("GET")]),e._v(": Used for retrieving resources")]),e._v(" "),r("li",[r("code",[e._v("POST")]),e._v(": Used for creating resources")]),e._v(" "),r("li",[r("code",[e._v("PUT")]),e._v(": Used for updating resources")]),e._v(" "),r("li",[r("code",[e._v("DELETE")]),e._v(": Used for deleting resources")])]),e._v(" "),r("h2",[e._v("Example")]),e._v(" "),r("pre",[r("code",[e._v("GET    /cars - Return a collection of all cars\nGET    /cars/:id - Return a car by ID\nPOST   /cars - Creates a new car in the collection\nPUT    /cars/:id - Updates a existing car\nDELETE /cars - Deletes all cars\nDELETE /cars/:id - Deletes a car\n")])]),e._v(" "),r("h2",[e._v("Objects")]),e._v(" "),r("p",[e._v("In the previous section we talked about using an id to perform operations to a specific entity in\na collection. This id should also be contained within the JSON object when we get it from the server,\nfor example our car resource might return the following:")]),e._v(" "),r("pre",[r("code",[e._v('GET /cars/2\n\n{\n  "id": 2,\n  "brand": "Tesla",\n  "model": "Model 3"\n}\n')])]),e._v(" "),r("p",[e._v("Now that we have that model, we might assign to a variable "),r("code",[e._v("car")]),e._v(". We might want\nto update the "),r("code",[e._v("car")]),e._v(" variable.")]),e._v(" "),r("pre",[r("code",{staticClass:"language-javascript"},[e._v("car.brand = "),r("span",{staticClass:"hljs-string"},[e._v('"Model X"')]),e._v("\n")])]),e._v(" "),r("p",[e._v("Now we want to update the record on the server, we can do it in JavaScript as follows:")]),e._v(" "),r("pre",[r("code",{staticClass:"language-javascript"},[r("span",{staticClass:"hljs-keyword"},[e._v("const")]),e._v(" response = "),r("span",{staticClass:"hljs-keyword"},[e._v("await")]),e._v(" fetch("),r("span",{staticClass:"hljs-string"},[e._v('"/cars/"')]),e._v(" + car.id, {\n  "),r("span",{staticClass:"hljs-attr"},[e._v("method")]),e._v(": "),r("span",{staticClass:"hljs-string"},[e._v('"PUT"')]),e._v(",\n  "),r("span",{staticClass:"hljs-attr"},[e._v("body")]),e._v(": "),r("span",{staticClass:"hljs-built_in"},[e._v("JSON")]),e._v(".stringify(car)\n});\n")])]),e._v(" "),r("p",[e._v("As you can see from the example, ensuring the resource id and object id ("),r("code",[e._v("car.id")]),e._v(") matches is important.")]),e._v(" "),r("h2",[e._v("Nesting Resources")]),e._v(" "),r("p",[e._v("Some resources relate to others, for example a car has many parts. Both cars and parts are resources.\nParts can be nested under cars, like follows:")]),e._v(" "),r("pre",[r("code",[e._v("/cars/:car-id/parts/:part-id\n\ne.g.\n/cars/2/parts/10\n")])]),e._v(" "),r("p",[e._v("A new part for a car with id 2 can be created as follow:")]),e._v(" "),r("pre",[r("code",[e._v("POST /cars/2/parts\n")])]),e._v(" "),r("h2",[e._v("How it all works together")]),e._v(" "),r("p",[e._v("URL (Universal Resource Locator)")]),e._v(" "),r("h2",[e._v("Extra: Versioning")]),e._v(" "),r("p",[e._v("Over time your API might change with requirements, this could potentially break compatibility\nwith older versions of the API. Some times there might be a need to run the old version\nalongside the new version, allowing people to use the legacy API before they transition to the new one.")]),e._v(" "),r("p",[e._v("A nice way to manage this is to version the API. If you already do "),r("a",{attrs:{href:"https://semver.org/"}},[e._v("semantic versioning")]),e._v(", you can use the major version for this (as changing the major version implies breaking backwards compatibility).")]),e._v(" "),r("p",[e._v("Versioning can look like the following:")]),e._v(" "),r("pre",[r("code",[e._v("/v1/cars\n/v2/cars/\n")])]),e._v(" "),r("h2",[e._v("Conclusion")]),e._v(" "),r("p",[e._v("Following certain patterns makes it much easier to create APIs. Designing straight forward APIs also makes it easier for the people consuming the APIs.")]),e._v(" "),r("p",[e._v("In summary, this can be done by:")]),e._v(" "),r("ul",[r("li",[e._v("Naming of resources")]),e._v(" "),r("li",[e._v("Use HTTP verbs")]),e._v(" "),r("li",[e._v("Nest related resources")])]),e._v(" "),r("h2",[e._v("Further Reading")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://docs.microsoft.com/en-us/azure/architecture/best-practices/api-design"}},[e._v("Api Design by Microsoft")])])])])}],!1,null,null,null);t.default=component.exports}}]);